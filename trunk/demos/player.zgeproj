<?xml version="1.0" encoding="iso-8859-1" ?>
<ZApplication Name="App" Caption="Simple Player" ClearColor="0 0.1608 0.3255 1" ScreenMode="0" ViewportRatio="2" MouseVisible="255" NoSound="1" AndroidPackageName="com.rado1.SimplePlayer">
  <Comment>
<![CDATA[Demo of a simple music player for Android (ZgeSL librray) and
Windows (Winmm.dll).

Created by Radovan Cervenka (c) 2014]]>
  </Comment>
  <OnLoaded>
    <ZExternalLibrary Comment="ZgeSL audio library" ModuleName="./libZgeSL.so" CallingConvention="1">
      <Source>
<![CDATA[/*
  ZgeSE Music Library used to play MP3, OGG, ... files on Android.
  Note: Change minSdkVersion to "9" in AndroidManifest.xml.

  Download Android shared library and demos from:
  http://googledrive.com/host/0BxwfQ8la88ouM0NnQVZ3dHBMT2c/

  More info on forum:
  http://www.emix8.org/forum/viewtopic.php?t=1123

  Version 1.0, November 2014.

  Copyright (c) 2014 Radovan Cervenka
*/

// Initializes the library.
int zslInit() {}

// Frees allocated resources.
void zslExit() {}

// Plays a music file (MP3, OGG, MIDI) either from the assets folder or from URI.
int zslPlayFile(string filename, int isAsset) {}

// Pauses the player. The playback head may be anywhere within the
// content but is not trying to move.
int zslPause() {}

//  Starts to play. The playback head may be anywhere within the
// content and is trying to move.
int zslResume() {}

// Stops the player. The playback head is forced to the beginning
// of the content and is not trying to move.
int zslStop() {}

// Enables or disables looping. If the isLooping parameter is 0, the playback
// is not looping. If 1, the playback loops.
int zslSetLooping(int isLooping) {}

// Returns the player’s current play state.
int zslGetPlayState() {}

// play states:
const int SL_PLAYSTATE_STOPPED = 1;
const int SL_PLAYSTATE_PAUSED	= 2;
const int SL_PLAYSTATE_PLAYING = 3;

// Returns the duration of the content in milliseconds.
int zslGetDuration() {}

// Sets the position of the playback head in milliseconds. The mode parameter
// is either SL_SEEKMODE_FAST for fast and less precise setting or
// SL_SEEKMODE_ACCURATE for more precise but slower position setting.
int zslSetPosition(int position, int mode) {}

// position modes:
const int SL_SEEKMODE_FAST = 0x0001;
const int SL_SEEKMODE_ACCURATE = 0x0002;

// Returns the current position of the playback head in milliseconds.
int zslGetPosition() {}

// Sets the volume level in range from 0 to 1000; 500 is the default loudness.
int zslSetVolume(int volume) {}

// Mutes or unmutes playing. If the isMuted parameter is 0, the sound is muted.
// If 1, the sound is unmuted.
int zslSetMute(int isMuted) {}

// Sets stereo position (panning) in the range -1000 (left channel only) to
// 1000 (right channel only). A panning 0 indicates the sound in the center.
int zslSetPanning(int panning) {}]]>
      </Source>
    </ZExternalLibrary>
    <ZExternalLibrary Comment="Media Control Interface (MCI)" ModuleName="Winmm.dll" Source="int mciSendStringA(string lpszCommand, xptr lpszReturnString, int cchReturn, int hwndCallback){}"/>
    <ZLibrary Comment="Common music library">
      <Source>
<![CDATA[/*
  Common external music library for Windows and Android.
  Uses ZgeSL library for Android and MCI API DLL (Winmm.dll) for Windows.

  Version 1.0, November 2014.

  Copyright (c) 2014 Radovan Cervenka
*/

const int MUSIC_RESULT_SUCCESS = 0;

// Auxiliary variables.
int __musicVolume;
string __musicIsLooping;
const int __MCI_OUT_LEN = 32;
byte[__MCI_OUT_LEN] __mciOutput;

// Auxiliary function: Returns string value from MCI output.
string __mciResultToString(){
  string s = "";
  for(int i = 0; i < __MCI_OUT_LEN && __mciOutput[i] != 0; ++i){
    s = s + chr(__mciOutput[i]);
  }
  return s;
}

// Auxiliary function: Returns int value from MCI output.
int __mciResultToInt(){
  return strToInt(__mciResultToString());
}

// Initializes the music playback system.
void musicInit(){
  if(ANDROID)
    zslInit();
}

// Shuts down the music system.
void musicExit(){
  if(ANDROID)
    zslExit();
  else
    mciSendStringA("close music", null, 0, 0);
}

// Plays a music file. The isAsset parameter determines whether the filename is
// asset file, or URI. The isLooping parameter determines music looping.
int musicPlayFile(string filename, int isAsset, int isLooping){
  int res;
  if(ANDROID){
    res = zslPlayFile(filename, isAsset);
    if(res) return res;

    return zslSetLooping(isLooping);

  } else {
    mciSendStringA("close music", null, 0, 0);

    res = mciSendStringA("open " + filename + " alias music", null, 0, 0);
    if(res) return res;

    __musicIsLooping = isLooping ? " repeat":"";
    return mciSendStringA("play music" + __musicIsLooping, null, 0, 0);
  }
}

// Stops the music. The playback head is forced to the beginning.
void musicStop(){
  if(ANDROID)
    zslStop();
  else
    mciSendStringA("stop music", null, 0, 0);
}

// Pauses the music. The playback stays at the current position without moving.
void musicPause(){
  if(ANDROID)
    zslPause();
  else
    mciSendStringA("pause music", null, 0, 0);
}

// Resumes the music playback from the paused or stopped position.
void musicResume(){
  if(ANDROID)
    zslResume();
  else {
    mciSendStringA("status music mode", __mciOutput, __MCI_OUT_LEN, 0);

    if(__mciResultToString() == "stopped")
      mciSendStringA("play music" + __musicIsLooping, null, 0, 0);
    else
      mciSendStringA("resume music", null, 0, 0);
  }
}

// Sets volume in the range 0 (no sound) to 1000 (max volume).
// If stereo panning is applied, use max value for volume 500.
void musicSetVolume(int volume){
  if(ANDROID)
    zslSetVolume(volume);
  else {
    __musicVolume = volume;
    mciSendStringA("setaudio music volume to " + intToStr(volume), null, 0, 0);
  }
}

// Sets stereo position (panning) in the range -1000 (left channel only) to
// 1000 (right channel only). A panning 0 indicates the sound in the center.
void musicSetPanning(int panning){
  if(ANDROID)
    zslSetPanning(panning);
  else {
    mciSendStringA("setaudio music left volume to " +
      intToStr(__musicVolume * (1 - panning / 1000)), null, 0, 0);
    mciSendStringA("setaudio music right volume to " +
      intToStr(__musicVolume * (1 + panning / 1000)), null, 0, 0);
  }
}

// Returns duration of music content in milliseconds.
int musicGetDuration(){
  if(ANDROID)
    return zslGetDuration();
  else {
    mciSendStringA("status music length", __mciOutput, __MCI_OUT_LEN, 0);
    return __mciResultToInt();
  }
}

// Music play states:
const int MUSIC_STATUS_UNDEFINED = -1;
const int MUSIC_STATUS_STOPPED = 1;
const int MUSIC_STATUS_PAUSED = 2;
const int MUSIC_STATUS_PLAYING = 3;
const int MUSIC_STATUS_NOT_READY = 4;

// Returns the current music playing status.
int musicGetStatus(){
  if(ANDROID)
    return zslGetPlayState();
  else {
    mciSendStringA("status music mode", __mciOutput, __MCI_OUT_LEN, 0);
    switch(__mciResultToString()){
      case "stopped": return MUSIC_STATUS_STOPPED;
      case "paused": return MUSIC_STATUS_PAUSED;
      case "playing": return MUSIC_STATUS_PLAYING;
      case "not ready": return MUSIC_STATUS_NOT_READY;
      default: return MUSIC_STATUS_UNDEFINED;
    }
  }
}

// Returns the current position of music playback in milliseconds.
int musicGetPosition(){
  if(ANDROID)
    return zslGetPosition();
  else {
    mciSendStringA("status music position", __mciOutput, __MCI_OUT_LEN, 0);
    return __mciResultToInt();
  }
}

// Sets the music playback position in milliseconds. The mode parameter is
// either SL_SEEKMODE_FAST for fast and less precise setting or
// SL_SEEKMODE_ACCURATE for more precise but slower position setting.
int musicSetPosition(int position, int mode){
  if(ANDROID)
    zslSetPosition(position, mode);
  else {
    mciSendStringA("status music mode", __mciOutput, __MCI_OUT_LEN, 0);

    if(__mciResultToString() == "playing")
      mciSendStringA("play music from " + intToStr(position) + __musicIsLooping, null, 0, 0);
    else
      mciSendStringA("seek music to " + intToStr(position), null, 0, 0);
  }
}]]>
      </Source>
    </ZLibrary>
    <ZLibrary Comment="Globals">
      <Source>
<![CDATA[// boolean constants
const int FALSE = 0;
const int TRUE = 1;

// music duration
int D;

// was/is Pause/Resume button pressed
int wasButtonPressed, isButtonPressed;

// is music paused
int isPaused;]]>
      </Source>
    </ZLibrary>
    <ZExpression Comment="Play">
      <Expression>
<![CDATA[musicInit();
musicPlayFile("Sunset.mp3", 1, 1);
//musicPlayFile("file:///sdcard/Download/Sunset.mp3", 0, 1);
//musicPlayFile("http://www.mfiles.co.uk/mp3-downloads/Apocalypse.mp3", 0, 1);

// getting duration in OpenSL ES can take a while
for(D = -1 ; D <= 0; D = musicGetDuration());

isPaused = FALSE;
wasButtonPressed = FALSE;
ButtonTexture.Texture = PauseBitmap;]]>
      </Expression>
    </ZExpression>
  </OnLoaded>
  <OnUpdate>
    <KeyPress Comment="Pause if lost focus" CharCode="255">
      <OnPressed>
        <ZExpression>
          <Expression>
<![CDATA[musicPause();
ButtonTexture.Texture = PlayBitmap;
isPaused = TRUE;]]>
          </Expression>
        </ZExpression>
      </OnPressed>
    </KeyPress>
    <ZExpression Expression="isButtonPressed = FALSE;"/>
    <KeyPress Comment="LMB/touch" Keys="{">
      <OnPressed>
        <ZExpression Comment="Set music playing">
          <Expression>
<![CDATA[float x = App.MousePosition.X, y = App.MousePosition.Y;

// pause/resume button pressed
if(x > -0.15 && x < 0.15 && y > -0.78 && y < -0.41) isButtonPressed = TRUE;

// set playing position
if(x > -0.91 && x < 0.91 && y > -0.12 && y < 0.12)
  musicSetPosition(D * (x*0.54945 + 0.5), SL_SEEKMODE_ACCURATE);]]>
          </Expression>
        </ZExpression>
      </OnPressed>
    </KeyPress>
    <ZExpression>
      <Expression>
<![CDATA[// TEST set volume
//musicSetVolume((App.MousePosition.Y + 1) * 500);

// update position slider
Slider.Translate.X = 10.0*musicGetPosition()/D - 5.0;

// pause/resume pressed
if(!isButtonPressed && wasButtonPressed){
  if(isPaused){
    musicResume();
    ButtonTexture.Texture = PauseBitmap;
  } else {
    musicPause();
    ButtonTexture.Texture = PlayBitmap;
  }

  isPaused = 1 - isPaused;
}

wasButtonPressed = isButtonPressed;]]>
      </Expression>
    </ZExpression>
  </OnUpdate>
  <OnRender>
    <UseMaterial Material="DefaultMaterial"/>
    <RenderTransformGroup Comment="Timescale" Scale="10 0.8 1">
      <Children>
        <RenderSprite/>
      </Children>
    </RenderTransformGroup>
    <RenderTransformGroup Comment="Timescale" Scale="9.94 0.74 1">
      <Children>
        <RenderSetColor Color="0 0.251 0.502 1"/>
        <RenderSprite/>
      </Children>
    </RenderTransformGroup>
    <RenderTransformGroup Name="Slider" Scale="0.3 1 1" Translate="-4.7713 0 0">
      <Children>
        <RenderSetColor Color="0 0.502 1 1"/>
        <RenderSprite/>
      </Children>
    </RenderTransformGroup>
    <RenderTransformGroup Name="SignalLevel" Scale="0 0.05 1" Translate="0 1.68 0">
      <Children>
        <RenderSetColor Color="1 1 0 1"/>
        <RenderSprite/>
      </Children>
    </RenderTransformGroup>
    <RenderTransformGroup Comment="Button" Scale="1.5 1.5 1" Translate="0 -2.5 0">
      <Children>
        <UseMaterial Material="ButtonMaterial"/>
        <RenderSprite/>
      </Children>
    </RenderTransformGroup>
  </OnRender>
  <OnClose>
    <ZExpression Comment="Stop">
      <Expression>
<![CDATA[musicStop();
musicExit();]]>
      </Expression>
    </ZExpression>
  </OnClose>
  <Content>
    <Group Comment="Artwork">
      <Children>
        <Material Name="DefaultMaterial" Shading="1" Light="0" ZBuffer="0"/>
        <Bitmap Name="PlayBitmap" Width="3" Height="3">
          <Producers>
            <BitmapFromFile Comment="Imported from play-128.png" Transparency="2" HasAlphaLayer="1">
              <BitmapFile>

              </BitmapFile>
            </BitmapFromFile>
          </Producers>
        </Bitmap>
        <Bitmap Name="PauseBitmap" Width="3" Height="3">
          <Producers>
            <BitmapFromFile Comment="Imported from pause-128.png" Transparency="2" HasAlphaLayer="1">
              <BitmapFile>

              </BitmapFile>
            </BitmapFromFile>
          </Producers>
        </Bitmap>
        <Material Name="ButtonMaterial" Shading="1" Light="0" Blend="1" ZBuffer="0">
          <Textures>
            <MaterialTexture Name="ButtonTexture" Texture="PauseBitmap" TexCoords="1"/>
          </Textures>
        </Material>
      </Children>
    </Group>
  </Content>
</ZApplication>
